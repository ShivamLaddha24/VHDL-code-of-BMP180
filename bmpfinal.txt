LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
Use ieee.std_logic_arith.all;

--function "+"( A,B:std_logic_vector) return std_logic_vector is
--constant size1: INTEGER := a'LENGTH;
--constant size2: INTEGER := b'LENGTH;
--constant size:integer := max(size1,size2)+1;
--variable result:std_logic_vector(size downto 0);
--begin
--result:=std_logic_vector(unsigned(A)+unsigned(B));
--return result;
--end "+";

ENTITY i2c_master IS
  GENERIC(
    input_clk : INTEGER := 50000000; --input clock speed from user logic in Hz
    --input_clk2 : INTEGER := 25000000; --input clock speed from user logic in Hz
    bus_clk   : INTEGER := 35000);   --speed the i2c bus (scl) will run at in Hz
  PORT(
    clk       : IN     STD_LOGIC;                    --system clock
    --clk2       : IN     STD_LOGIC;                    --system clock
    reset_n   : IN     STD_LOGIC;                    --active low reset
    --ena       : IN     STD_LOGIC;                    --latch in command
    --addr      : IN     STD_LOGIC_VECTOR(6 DOWNTO 0); --address of target slave
    --rw        : IN     STD_LOGIC;                    --'0' is write, '1' is read
    --data_wr   : IN     STD_LOGIC_VECTOR(7 DOWNTO 0); --data to write to slave
    busy      : OUT    STD_LOGIC;                    --indicates transaction in progress
    data_rd   : OUT    STD_LOGIC_VECTOR(15 DOWNTO 0); --data read from slave
    ack_error : BUFFER STD_LOGIC;                    --flag if improper acknowledge from slave
    sda_in       : IN  STD_LOGIC;                    --serial data input and output of i2c bus
    sda_out       : OUT  STD_LOGIC;                    --serial data input and output of i2c bus 
    EN            : OUT STD_LOGIC;   
    scl       : INOUT    STD_LOGIC);                     --serial clock output of i2c bus
END i2c_master;

ARCHITECTURE logic OF i2c_master IS
  CONSTANT divider  :  INTEGER := (input_clk/bus_clk)/4; --number of clocks in 1/4 cycle of scl
  TYPE machine IS(ready, start,restart, command, command2, slv_ack1, wr, wait_case, rd,rd2, slv_ack2, slv_ack3, mstr_ack, mstr_nack, stop); --needed states
  SIGNAL state         : machine;                        --state machine
  SIGNAL data_clk      : STD_LOGIC;                      --data clock for sda
  SIGNAL data_clk_prev : STD_LOGIC;                      --data clock during previous system clock
  SIGNAL scl_clk       : STD_LOGIC;                      --constantly running internal scl
  SIGNAL scl_ena       : STD_LOGIC := '0';               --enables internal scl to output
  SIGNAL sda_int       : STD_LOGIC := '1';               --internal sda
  SIGNAL sda_ena_n     : STD_LOGIC;                      --enables internal sda to output
  SIGNAL addr_rw       : STD_LOGIC_VECTOR(7 DOWNTO 0);   --latched in address and read/write
  SIGNAL data_tx       : STD_LOGIC_VECTOR(7 DOWNTO 0);   --latched in data to write to slave
  SIGNAL data_rx       : STD_LOGIC_VECTOR(7 DOWNTO 0);   --data received from slave
  SIGNAL bit_cnt       : INTEGER RANGE 0 TO 7 := 7;      --tracks bit number in transaction
  SIGNAL stretch       : STD_LOGIC := '0';               --identifies if slave is stretching scl
  SIGNAL counter       : INTEGER := 0;
  SIGNAL cases         : STD_LOGIC_VECTOR(2 DOWNTO 0) := "111";
  SIGNAL ena           : STD_LOGIC := '1';                      --latch in command
  SIGNAL rdwr         : STD_LOGIC;
  -- SIGNAL UT,B,C,D           : STD_LOGIC_VECTOR(15 downto 0);
  -- SIGNAL A, E            : ufixed(1 downto -4);
  -- SIGNAL  F_sig,TEMP_sig         : ufixed(15 downto 0);
  -- CONSTANT AC5         : integer :=32757;
  -- CONSTANT AC6     : integer := 23153;
  -- CONSTANT MC     : integer := -8711;
  -- CONSTANT MD     : integer := 2868;
BEGIN

  --generate the timing for the bus clock (scl_clk) and the data clock (data_clk)
  PROCESS(clk, reset_n)
    VARIABLE count  :  INTEGER RANGE 0 TO divider*4;  --timing for clock generation
  BEGIN
    IF(reset_n = '0') THEN                --reset asserted
      stretch <= '0';
      count := 0;
      data_clk <= '0';
      data_clk_prev <= '1';
    ELSIF(rising_edge(clk)) THEN
      data_clk_prev <= data_clk;          --store previous value of data clock
      IF(count = divider*4-1) THEN        --end of timing cycle
        count := 0;                       --reset timer
      ELSIF(stretch = '0') THEN           --clock stretching from slave not detected
        count := count + 1;               --continue clock generation timing
      END IF;
      CASE count IS
        WHEN 0 TO divider-1 =>            --first 1/4 cycle of clocking
          scl_clk <= '0';
          data_clk <= '0';
        WHEN divider TO divider*2-1 =>    --second 1/4 cycle of clocking
          scl_clk <= '0';
          data_clk <= '1';
        WHEN divider*2 TO divider*3-1 =>  --third 1/4 cycle of clocking
          scl_clk <= '1';                 --release scl
          IF(scl = '0') THEN              --detect if slave is stretching clock
            stretch <= '1';
          ELSE
            stretch <= '0';
          END IF;
          data_clk <= '1';
        WHEN OTHERS =>                    --last 1/4 cycle of clocking
          scl_clk <= '1';
          data_clk <= '0';
      END CASE;
    END IF;
  END PROCESS;

PROCESS(clk)
BEGIN
    IF(reset_n = '1') THEN
    CASE cases IS
	  WHEN "000" =>	
		addr_rw <= "11101110";         --collect requested slave address and command
      WHEN "001" =>
		data_tx <= "11110100";         --collect requested data to write
	  WHEN "010" =>
		data_tx <= "00101110";         --collect requested slave address and command
	  WHEN "100" =>
		addr_rw <= "11101110";         --collect requested data to write
      WHEN "101" =>
		data_tx <= "11110110";         --collect requested data to write
      WHEN "110" =>
		addr_rw <= "11101111";         --collect requested data to write		
	  WHEN others =>
		NULL;                       --remain idle
	END CASE; 
  END IF;
END PROCESS;

  --state machine and writing to sda during scl low (data_clk rising edge)
  PROCESS(clk, reset_n)
   
  BEGIN
    IF(reset_n = '0') THEN                 --reset asserted
      state <= ready;                      --return to initial state
      busy <= '1';   --indicate not available
      ena <= '1';
      scl_ena <= '0';                      --sets scl high impedance
      rdwr <= '0';
      sda_int <= '1';                      --sets sda high impedance
      ack_error <= '0';                    --clear acknowledge error flag
      bit_cnt <= 7;                        --restarts data bit counter
      data_rd <= "0000000000000000";               --clear data read port
	ELSIF(rising_edge(clk)) THEN
      IF(data_clk = '1' AND data_clk_prev = '0') THEN  --data clock rising edge
        CASE state IS
			WHEN ready =>                      --idle state
            IF(ena = '1') THEN               --transaction requested
              busy <= '1';                   --flag busy
              --addr_rw <= addr & rw;          --collect requested slave address and command
              --data_tx <= data_wr;            --collect requested data to write
              cases <= cases + "001";
              EN <='1';
              state <= start;                --go to start bit
            ELSE                             --remain idle
              busy <= '0';                   --unflag busy
              state <= ready;                --remain idle
            END IF;
			WHEN start =>                      --start bit of transaction
			EN <='1';
            busy <= '1';                     --resume busy if continuous mode
            sda_int <= addr_rw(bit_cnt);     --set first address bit to bus
			--cases <= cases + "001" ;
            state <= command;     --go to command
			WHEN command =>                   --address and command byte of transaction
            IF(bit_cnt = 0) THEN             --command transmit finished
              sda_int <= '1';                --release sda for slave acknowledge
              bit_cnt <= 7;     --reset bit counter for "byte" states
              cases <= cases + "001";
              EN <= '0';
			  state <= slv_ack1;             --go to slave acknowledge (command)
            ELSE                             --next clock cycle of command state
              bit_cnt <= bit_cnt - 1;        --keep track of transaction bits
              sda_int <= addr_rw(bit_cnt-1); --write address/command bit to bus
              state <= command;              --continue with command
            END IF;
			WHEN command2 =>                    --address and command byte of 
            IF(bit_cnt = 0) THEN             --command transmit finished
              sda_int <= '1';                --release sda for slave acknowledge
              bit_cnt <= 7;     --reset bit counter for "byte" states
              EN <= '0';
			  state <= slv_ack3;             --go to slave acknowledge (command)
            ELSE                             --next clock cycle of command state
              bit_cnt <= bit_cnt - 1;        --keep track of transaction bits
              sda_int <= addr_rw(bit_cnt-1); --write address/command bit to bus
              state <= command2;              --continue with command
            END IF;
			WHEN slv_ack1 =>                   --slave acknowledge bit (command)
			EN <='1';
            -- IF(addr_rw(0) = '0') THEN        --write command
              -- sda_int <= data_tx(bit_cnt);   --write first bit of data
              -- state <= wr; 			  --go to write byte
			  --cases <= cases + "001";
			-- IF(rd/wr = '0') THEN
              sda_int <= data_tx(bit_cnt);   --write first bit of data
              state <= wr;                   --go to write byte				
            -- ELSE 
                                        --read command      
              --sda_int <= '1';  --release sda from incoming data
			  -- state <= command2;
              -- IF(data_tx = "11110111") THEN
				-- state <= rd2;   --go to read byte
              -- ELSE
				-- state <= rd;
			  -- END IF;
			--END IF;
			WHEN wr =>                         --write byte of transaction
            busy <= '1';                     --resume busy if continuous mode
			IF(bit_cnt = 0) THEN             --write byte transmit finished
              sda_int <= '1';                --release sda for slave acknowledge
              bit_cnt <= 7;			  --reset bit counter for "byte" states
              cases <= cases + "001";
              EN <= '0';
			  IF(cases = "001") THEN
				state <= slv_ack2;             --go to slave acknowledge (write)
			  ELSIF(cases = "101") THEN
				state <= slv_ack2;  
		      ELSE
				state <= slv_ack3;
			  END IF;
            ELSE                             --next clock cycle of write state
              bit_cnt <= bit_cnt - 1;        --keep track of transaction bits
              sda_int <= data_tx(bit_cnt-1); --write next bit to bus
              state <= wr;                   --continue writing
            END IF;
			WHEN rd =>                         --read byte of transaction
			
            busy <= '1';                     --resume busy if continuous mode
            IF(bit_cnt = 0) THEN             --read byte receive finished
              IF(ena = '1') THEN             --continuing with another read at same address
                sda_int <= '0';              --acknowledge the byte has been received
              ELSE                           --stopping or continuing with a write
                sda_int <= '1';              --send a no-acknowledge (before stop or repeated start)
              END IF;
              bit_cnt <= 7;                  --reset bit counter for "byte" states
              data_rd(15 downto 8) <= data_rx; --output received data
              EN <= '1';
              state <= mstr_ack;             --go to master acknowledge
            ELSE                             --next clock cycle of read state
              bit_cnt <= bit_cnt - 1;        --keep track of transaction bits
              state <= rd;                   --continue reading
            END IF;
			WHEN rd2 =>                         --read byte of transaction
            busy <= '1';                     --resume busy if continuous mode
            IF(bit_cnt = 0) THEN             --read byte receive finished
              --IF(ena = '1') THEN             --continuing with another read at same address
                --sda_int <= '0';              --acknowledge the byte has been received
              --ELSE                           --stopping or continuing with a write
                sda_int <= '1';              --send a no-acknowledge (before stop or repeated start)
--              END IF;
              bit_cnt <= 7;                  --reset bit counter for "byte" states
              data_rd(7 downto 0) <= data_rx; --output received data
              EN <= '1';
              state <= mstr_nack;             --go to master acknowledge
            ELSE                             --next clock cycle of read state
              bit_cnt <= bit_cnt - 1;        --keep track of transaction bits
              state <= rd2;                   --continue reading
            END IF;
			WHEN slv_ack2 =>                   --slave acknowledge bit (write)
			EN <= '1';
            sda_int <= data_tx(bit_cnt);
            IF(ena = '1') THEN               --continue transaction
              busy <= '1';                   --continue is accepted
              --addr_rw <= addr & rw; 			  --collect requested slave address and command
			  --cases <= cases + "001";
			IF (rdwr = '0') THEN
				state<= wr;
			  ELSE
				state <= restart;                   --go to repeated ready
		      END IF;
              --data_tx <= data_wr;            --collect requested data to write
              --IF(addr_rw = addr & rw) THEN   --continue transaction with another write
              --  sda_int <= data_wr(bit_cnt); --write first bit of data
              --  state <= wr;                 --go to write byte
              --ELSE    --continue transaction with a read or new slave
--             IF(ctrl = '1') THEN
--state <= start;
-- ELSE                 --go to repeated ready
--              END IF;
--            ELSE --complete transaction
--              IF(ctrl = '1') THEN
--state <= start;
			-- ELSE
                -- state <= stop;                 --go to stop bit
            END IF;
            WHEN restart =>                      --start bit of transaction
			EN <='1';
            busy <= '1';                     --resume busy if continuous mode
            sda_int <= addr_rw(bit_cnt);     --set first address bit to bus
			--cases <= cases + "001" ;
            state <= command2;     --go to command
                
			WHEN slv_ack3 =>                   --slave acknowledge bit (command)
            -- IF(addr_rw(0) = '0') THEN        --write command
              -- sda_int <= data_tx(bit_cnt);   --write first bit of data
              -- state <= wr; 			  --go to write byte
			--cases <= cases + "001";
            sda_int <= '1';  --release sda from incoming data
			IF(rdwr = '0') THEN 
              rdwr <='1';  
              EN <= '1';                             
			  state <= stop;
			ELSE 
			EN <= '0';
			  state <= rd;
              -- IF(data_tx = "11110111") THEN
				-- state <= rd2;   --go to read byte
              -- ELSE
				-- state <= rd;
			  -- END IF;
			END IF;
			WHEN wait_case=>
				IF( counter >= 112) THEN
				  counter <= 0;
				  state <= ready;
				ELSIF(counter >= 0 and counter < 112) THEN 
				  counter <= counter + 1;
				  state <= wait_case;
			    END IF;
			WHEN mstr_ack =>                   --master acknowledge bit after a read
			EN <= '0';
            IF(ena = '1') THEN               --continue transaction
              busy <= '1';                   --continue is accepted and data received is available on bus
              --addr_rw <= "11101111";          --collect requested slave address and command
              --data_tx <= data_wr;            --collect requested data to write
              --IF(addr_rw = "11101111") THEN   --continue transaction with another read
              sda_int <= '1';              --release sda from incoming data
              --  state <= rd2;                 --go to read byte
              --ELSE                           --continue transaction with a write or new slave
                state <= rd2;                --repeated ready
              --END IF;    
              --cases <= cases + "001";
            -- ELSE                             --complete transaction
              -- state <= ready;                --go to ready bit
            END IF;
			WHEN mstr_nack =>
			EN <= '1';
			cases <= cases + "001";
			IF(rdwr = '1') THEN
				rdwr <= '0';
			
			 sda_int <= '1';
			 busy <= '0';
			 state <= stop;
			 END IF;
			 --cases <= cases + "001";
			WHEN stop =>                       --stop bit of transaction
			busy <= '0';                     --unflag busy
            state <= wait_case;                  --go to idle state
			END CASE;    
		ELSIF(data_clk = '0' AND data_clk_prev = '1') THEN  --data clock falling edge
			CASE state IS
			WHEN start =>                  
            IF(scl_ena = '0') THEN                  --starting new transaction
              scl_ena <= '1';                       --enable scl output
              ack_error <= '0';                     --reset acknowledge error output
            END IF;
            WHEN restart =>                  
            IF(scl_ena = '0') THEN                  --starting new transaction
              scl_ena <= '1';                       --enable scl output
              ack_error <= '0';                     --reset acknowledge error output
            END IF;
			WHEN slv_ack1 =>                          --receiving slave acknowledge (command)
            IF(sda_in /= '0' OR ack_error = '1') THEN  --no-acknowledge or previous no-acknowledge
              ack_error <= '1';                     --set error output if no-acknowledge
            END IF;
			WHEN rd =>                                --receiving slave data
			EN <= '0';
            data_rx(bit_cnt) <= sda_in;                --receive current slave data bit
            WHEN rd2 =>                                --receiving slave data
			EN <= '0';
            data_rx(bit_cnt) <= sda_in;                --receive current slave data bit
			WHEN slv_ack2 =>                          --receiving slave acknowledge (write)

            IF(sda_in /= '0' OR ack_error = '1') THEN  --no-acknowledge or previous no-acknowledge
              ack_error <= '1';                     --set error output if no-acknowledge
            END IF;
            WHEN slv_ack3 =>                          --receiving slave acknowledge (command)
            IF(sda_in /= '0' OR ack_error = '1') THEN  --no-acknowledge or previous no-acknowledge
              ack_error <= '1';                     --set error output if no-acknowledge
            END IF;
			WHEN stop =>
--          
            scl_ena <= '0'; --disable scl
           -- ena <= '0'; --disable ena
            --reset_n <='1';
			WHEN OTHERS =>
            NULL;
        END CASE;
      END IF;
    END IF;
  END PROCESS;  

  --set sda output
  WITH state SELECT
    sda_ena_n <= data_clk_prev WHEN start,     --generate start condition
                data_clk_prev WHEN restart,     --generate start condition
                 NOT data_clk_prev WHEN stop,  --generate stop condition
                 sda_int WHEN OTHERS;          --set to internal sda signal    
     
  --set scl and sda outputs
  scl <= '0' WHEN (scl_ena = '1' AND scl_clk = '0') ELSE '1';
  sda_out <= '0' WHEN sda_ena_n = '0' ELSE '1';
  
 -- PROCESS(data_rd)
-- variable ut_int,D_int,X1,X2,B5,B,F: integer;
-- BEGIN
 -- function  "/"  (a : unsigned; b : unsigned) return integer is
    -- variable a1 : unsigned(15 downto 0):=a;
    -- variable b1 : unsigned(15 downto 0):=b;
    -- variable p1 : unsigned(16 downto 0):= (others => '0');
    -- variable i  : integer:=0;
    -- begin
        -- for i in 0 to b'length-1 loop
            -- p1(b'length-1 downto 1) := p1(b'length-2 downto 0);
            -- p1(0) := a1(a'length-1);
            -- a1(a'length-1 downto 1) := a1(a'length-2 downto 0);
            -- p1 := p1-b1;
            -- if(p1(b'length-1) ='1') then
                -- a1(0) :='0';
                -- p1 := p1+b1;
            -- else
                -- a1(0) :='1';
            -- end if;
        -- end loop;
        -- return to_integer(a1);
    -- end "/";

	-- UT <= data_rd;
	-- ut_int <= to_integer(unsigned(UT));
	-- X1 <= (ut_int - AC6) --* A;
	-- --A <= to_ufixed(0.9996,A);
	-- B <= X1 + MD;
	-- C <= conv_signal(B , C'length);
	-- D <= /(x"0800" , C);
	-- D_int <= to_integer(unsigned(D));
	-- X2 <= MC*D;
	-- B5 <= X1 + X2;
	-- E <= to_ufixed(0.0625,E);
	-- F <= B5 + 8;
	-- F_sig <= to_ufixed(F,F_sig);
	
	-- TEMP_sig <= F_sig * E;
	-- TEMP <= to_integer(unsigned(TEMP_sig));
END logic;